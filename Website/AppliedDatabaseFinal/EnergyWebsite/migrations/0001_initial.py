# Generated by Django 4.2 on 2023-04-23 00:25

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EnergyDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.TextField(blank=True, null=True)),
                ('generation_biomass', models.FloatField(blank=True, db_column='generation biomass', null=True)),
                ('generation_fossil_brown_coal_lignite', models.FloatField(blank=True, db_column='generation fossil brown coal/lignite', null=True)),
                ('generation_fossil_coal_derived_gas', models.FloatField(blank=True, db_column='generation fossil coal-derived gas', null=True)),
                ('generation_fossil_gas', models.FloatField(blank=True, db_column='generation fossil gas', null=True)),
                ('generation_fossil_hard_coal', models.FloatField(blank=True, db_column='generation fossil hard coal', null=True)),
                ('generation_fossil_oil', models.FloatField(blank=True, db_column='generation fossil oil', null=True)),
                ('generation_fossil_oil_shale', models.FloatField(blank=True, db_column='generation fossil oil shale', null=True)),
                ('generation_fossil_peat', models.FloatField(blank=True, db_column='generation fossil peat', null=True)),
                ('generation_geothermal', models.FloatField(blank=True, db_column='generation geothermal', null=True)),
                ('generation_hydro_pumped_storage_aggregated', models.FloatField(blank=True, db_column='generation hydro pumped storage aggregated', null=True)),
                ('generation_hydro_pumped_storage_consumption', models.FloatField(blank=True, db_column='generation hydro pumped storage consumption', null=True)),
                ('generation_hydro_run_of_river_and_poundage', models.FloatField(blank=True, db_column='generation hydro run-of-river and poundage', null=True)),
                ('generation_hydro_water_reservoir', models.FloatField(blank=True, db_column='generation hydro water reservoir', null=True)),
                ('generation_marine', models.FloatField(blank=True, db_column='generation marine', null=True)),
                ('generation_nuclear', models.FloatField(blank=True, db_column='generation nuclear', null=True)),
                ('generation_other', models.FloatField(blank=True, db_column='generation other', null=True)),
                ('generation_other_renewable', models.FloatField(blank=True, db_column='generation other renewable', null=True)),
                ('generation_solar', models.FloatField(blank=True, db_column='generation solar', null=True)),
                ('generation_waste', models.FloatField(blank=True, db_column='generation waste', null=True)),
                ('generation_wind_offshore', models.FloatField(blank=True, db_column='generation wind offshore', null=True)),
                ('generation_wind_onshore', models.FloatField(blank=True, db_column='generation wind onshore', null=True)),
                ('forecast_solar_day_ahead', models.IntegerField(blank=True, db_column='forecast solar day ahead', null=True)),
                ('forecast_wind_offshore_eday_ahead', models.FloatField(blank=True, db_column='forecast wind offshore eday ahead', null=True)),
                ('forecast_wind_onshore_day_ahead', models.IntegerField(blank=True, db_column='forecast wind onshore day ahead', null=True)),
                ('total_load_forecast', models.IntegerField(blank=True, null=True)),
                ('total_load_actual', models.FloatField(blank=True, null=True)),
                ('price_day_ahead', models.FloatField(blank=True, db_column='price day ahead', null=True)),
                ('price_actual', models.FloatField(blank=True, db_column='price actual', null=True)),
            ],
            options={
                'db_table': 'energy_dataset',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FossilFuelGeneration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.TextField(blank=True, db_column='TIME', null=True)),
                ('gen_brown_coal_lignite', models.FloatField(blank=True, db_column='GEN_BROWN_COAL_LIGNITE', null=True)),
                ('gen_gas', models.FloatField(blank=True, db_column='GEN_GAS', null=True)),
                ('gen_hard_coal', models.FloatField(blank=True, db_column='GEN_HARD_COAL', null=True)),
                ('gen_oil', models.FloatField(blank=True, db_column='GEN_OIL', null=True)),
            ],
            options={
                'db_table': 'fossil_fuel_generation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Load',
            fields=[
                ('row_key', models.IntegerField(blank=True, null=True)),
                ('time', models.TextField(blank=True, primary_key=True, serialize=False)),
                ('forcasted_load', models.IntegerField(blank=True, null=True)),
                ('actual_load', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'load',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TimeStamps',
            fields=[
                ('row', models.AutoField(primary_key=True, serialize=False)),
                ('time', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'time_stamps',
                'managed': False,
            },
        ),
    ]
